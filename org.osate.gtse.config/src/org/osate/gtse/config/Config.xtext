grammar org.osate.gtse.config.Config with org.osate.xtext.aadl2.Aadl2

generate config "http://www.osate.org/gtse/config/Config"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://aadl.info/AADL/2.0" as aadl2

ConfigPkg:
//	'package' name=PNAME
		'root' root=[Configuration|ID]
		configurations+=Configuration*
		Analyses?
		Outputs?
//	'end'
;

fragment Analyses*:
	'analyses' '{' 
		analyses+=STRING (','  analyses+=STRING)* 
	'}'
;

fragment Outputs*:
	'outputs' '{'
		outputs+=OutputVariable (',' outputs+=OutputVariable)* 
	'}'
;

OutputVariable:
	name=ID (':' type=Type)? limit=Limit?
;

Limit:
	relation=Relation
	bound=Literal
;

enum Type:
	INT='int' | FLOAT='float' | STRING='string'
;

enum Relation:
	GT='>' | GTE='>=' | EQ='==' | NEQ='!=' | LT='<' | LTE='<='
;

Literal returns aadl2::PropertyExpression:
	IntegerTerm
	| RealTerm
	| StringTerm
;

// TODO: extends configuration / configuration with arguments
// TODO: extends parameter? probably not
Configuration:
	'configuration' name=ID Parameters? 
	('extends' extended=[aadl2::ComponentClassifier|CNAME] With? )?
	Assignments?
;

fragment With*:
	'with' combined+=Combination ('&' combined+=Combination)*
;

Combination:
	->unsafe?='unsafe'?
	configuration=[Configuration|ID] Arguments?
;

fragment Parameters*:
	'(' (parameters+=ConfigParameter (',' parameters+=ConfigParameter)*)? ')'
;

ConfigParameter:
	name=ID ':' (FClassifierType | FPropertyType) choices=Candidates?
;

fragment FClassifierType*:
	category=ComponentCategory classifier=[aadl2::ComponentClassifier|CNAME]
;

fragment FPropertyType*:
	propertyType=[aadl2::Property|PNAME]
;

Candidates returns ConfigValue:
	{CandidateList} 'from' '(' (candidates+=ConfigExpression (',' candidates+=ConfigExpression)*)? ')'
;

fragment Assignments*:
	'{'	(assignments+=Assignment (',' assignments+=Assignment)*)? '}'
;

Assignment:
	// LVal
	// using fragment LVal leads to an exception in LazyLinker for x.y#p => v
	(
		(wildcard?='*' | ref=ElementRef) ('#' property=[aadl2::Property|PNAME])? 
		| '#' property=[aadl2::Property|PNAME]
	)
	'=>' 
	value=ConfigExpression
;

//fragment LVal*:
//	element=ElementRef ('#' property=[aadl2::Property|PNAME])? 
//	| '#' property=[aadl2::Property|PNAME]
//;

ConfigExpression returns ConfigValue:
	// classifier, parameter, configuration
	{NamedElementRef} ref=[aadl2::NamedElement|CNAME] Arguments? With? Assignments?
	| {PropertyValue} exp=CPropertyExpression
	| {NestedAssignments} Assignments
;

fragment Arguments*:
	'(' (arguments+=Argument (',' arguments+=Argument)*)? ')'	
;

Argument:
	parameter=[ConfigParameter|ID] '=>' value=ConfigExpression
;

ElementRef:
	element=[aadl2::NamedElement|ID] =>({ElementRef.prev=current} '.' element=[aadl2::NamedElement|ID])*
;

CPropertyExpression returns aadl2::PropertyExpression:
	BooleanLiteral
	| IntegerTerm 
	| RealTerm
	| StringTerm
	| NumericRangeTerm
	| RecordTerm
	| ReferenceTerm
	| ComponentClassifierTerm
	| ListTerm 
//	| ComputedTerm
;

NamedElement returns aadl2::NamedElement:
	ConfigPkg | Configuration | ConfigParameter | OutputVariable
;

// classifier name
CNAME: ID ('::' ID)* ('.' ID)?;

// property name
// see Aadl2 PNAME: ID ('::' ID)?;

// qualified name
QNAME: ID ('.' ID)*;
